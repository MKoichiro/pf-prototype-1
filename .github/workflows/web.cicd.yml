name: WEB CI/CD Pipeline

on:
  # Uncomment after verifying functionality
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '.github/workflows/web-cicd.yml'
  #     - 'infra/aws/task-def/web-td.json'
  #     - 'web/**'
  workflow_dispatch:
    inputs:
      run_deploy:
        description: 'deploy ジョブまで実行しますか？'
        required: true
        default: 'yes'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER_NAME: dev-pf-cluster
  ECS_SERVICE_NAME: dev-pf-web-srv
  ECS_CONTAINER_NAME: dev-pf-web-container
  ECR_REPOSITORY_NAME: pf-web-repo
  # ECS_TASK_DEFINITION_PATH: infra/aws/task-def/web-td.json
  ECS_TASK_DEFINITION_FAMILY_NAME: dev-pf-web-td
  DOCKER_IMAGE_TEMP: tmp-web-image:latest
  ARTIFACT_NAME: web-image-uri
  ARTIFACT_FILE: web-image-uri.txt

jobs:
  # Build
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Image
        # Import all environment variables needed when building the image through docker compose command
        env:
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          USER_ID: ${{ secrets.USER_ID }}
          GROUP_ID: ${{ secrets.GROUP_ID }}
          API_USER_NAME: ${{ secrets.API_USER_NAME }}
          API_GROUP_NAME: ${{ secrets.API_GROUP_NAME }}
          RUBY_VER: ${{ secrets.RUBY_VER }}
          RAILS_VER: ${{ secrets.RAILS_VER }}
          BUNDLE_PATH: ${{ secrets.BUNDLE_PATH }}
          BUNDLE_BIN: ${{ secrets.BUNDLE_BIN }}
          PROD_API_PORT: ${{ secrets.PROD_API_PORT }}
          WEB_USER_NAME: ${{ secrets.WEB_USER_NAME }}
          WEB_GROUP_NAME: ${{ secrets.WEB_GROUP_NAME }}
          NODE_VER: ${{ secrets.NODE_VER }}
          NPM_VER: ${{ secrets.NPM_VER }}
          YARN_VER: ${{ secrets.YARN_VER }}
          PROD_WEB_PORT: ${{ secrets.PROD_WEB_PORT }}
        run: docker compose -f compose.yml -f compose.prod.yml build web

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker image tag ${{ env.DOCKER_IMAGE_TEMP }} $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo $REGISTRY/$REPOSITORY:$IMAGE_TAG > ./web/${{ env.ARTIFACT_FILE }}

      - name: Upload the image URI file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: web/${{ env.ARTIFACT_FILE }}

  # Deploy
  deploy:
    if: ${{ github.event.inputs.run_deploy == 'yes' }}
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact

      - name: ADD $API_IMAGE_URI to $GITHUB_ENV
        run: echo "API_IMAGE_URI=$(cat $GITHUB_WORKSPACE/artifact/${{ env.ARTIFACT_FILE }})" >> $GITHUB_ENV

      # ref: https://github.com/aws-actions/amazon-ecs-deploy-task-definition/blob/master/README.md#task-definition-file
      - name: Download latest task definition from AWS cloud
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY_NAME }} --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition with new image URI
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ env.API_IMAGE_URI }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
